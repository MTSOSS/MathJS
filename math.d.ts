declare function getUnts(str: string): string;
declare function getNumericalValue(str: string): number;
declare function convertToRadians(n: string): number;
declare const math: {
    e: number;
    PI: number;
    LN2: number;
    LN10: number;
    TAU: number;
    LOG2E: number;
    LOG10E: number;
    EPSILON: number;
    PHI: number;
    add(...n: number[]): number;
    subtract(...n: number[]): number;
    multiply(...n: number[]): number;
    divide(...n: number[]): number;
    square(n: number): number;
    cube(n: number): number;
    power(n: number, e: number): number;
    root(n: number, e: number): number;
    round(n: number): number;
    roundUp(n: number): number;
    roundDown(n: number): number;
    absolute(n: number): number;
    remainder(n: number, d: number): number;
    max(...n: number[]): number;
    min(...n: number[]): number;
    sqrt(n: number): number;
    cbrt(n: number): number;
    hypotenuse(a: number, b: number): number;
    average(...n: number[]): number;
    mean(...n: number[]): number;
    median(...n: number[]): number;
    mode(...n: (number | 'string' | 'array')[]): string | number[];
    range(...n: (number | 'string' | 'array')[]): string | number[];
    factors(n: number, returnType?: 'string' | 'array'): string | number[];
    factorsOf(n: number, returnType?: 'string' | 'array'): string | number[];
    primeFactors(n: number, returnType?: 'string' | 'array'): string | number[];
    primeFactorsOf(n: number, returnType?: 'string' | 'array'): string | number[];
    greatestCommonDivisor(...n: number[]): number;
    GCD(...n: number[]): number;
    highestCommonFactor(...n: number[]): number;
    HCF(...n: number[]): number;
    leastCommonMultiple(...n: number[]): number;
    LCM(...n: number[]): number;
    isEqual(a: number, b: number): boolean;
    isEven(n: number): boolean;
    isOdd(n: number): boolean;
    isPositive(n: number): boolean;
    isNegative(n: number): boolean;
    isZero(n: number): boolean;
    isInteger(n: number): boolean;
    isFloat(n: number): boolean;
    isPrime(n: number): boolean;
    isComposite(n: number): boolean;
    isDivisible(n: number, d: number): boolean;
    isPowerOf(n: number, e: number): boolean;
    isPerfectSquare(n: number): boolean;
    isPerfectCube(n: number): boolean;
    isPerfectPower(n: number, b: number): boolean;
    isMultiple(n: number, m: number): boolean;
    isFactor(n: number, f: number): boolean;
    isArmstrong(n: number): boolean;
    isPalindrome(n: number): boolean;
    isFinite(n: number): boolean;
    isInfinite(n: number): boolean;
    factorial(n: number): number;
    fibonacci(n: number): number;
    fibonacciSeries(n: number, returnType?: 'string' | 'array'): string | number[];
    random(a: number, b: number): number;
    log(n: number, b?: number): number;
    logBase2(n: number): number;
    logBase5(n: number): number;
    logBase10(n: number): number;
    sin(n: string): number;
    cos(n: string): number;
    tan(n: string): number;
    cot(n: string): number;
    sec(n: string): number;
    csc(n: string): number;
    evaluateExpression(expression: string, variables: {
        [key: string]: number;
    }): any;
    evaluate(expression: string, variables: {
        [key: string]: number;
    }): any;
};
declare var module: any;
declare var exports: any;
declare var define: {
    (id: string[], factory: () => any): void;
    amd: any;
};
//# sourceMappingURL=math.d.ts.map