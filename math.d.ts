declare const _exports: {
    e: number;
    PI: number;
    LN2: number;
    LN10: number;
    TAU: number;
    LOG2E: number;
    LOG10E: number;
    EPSILON: any;
    PHI: number;
    add(...n: any[]): any;
    subtract(...n: any[]): any;
    multiply(...n: any[]): any;
    divide(...n: any[]): any;
    square(n: any): number;
    cube(n: any): number;
    power(n: any, e: any): number;
    root(n: any, e: any): number;
    round(n: any): number;
    roundUp(n: any): number;
    roundDown(n: any): number;
    absolute(n: any): number;
    remainder(n: any, d: any): number;
    max(...n: any[]): number;
    min(...n: any[]): number;
    sqrt(n: any): number;
    cbrt(n: any): any;
    hypotenuse(a: any, b: any): any;
    average(...n: any[]): number;
    mean(...n: any[]): number;
    median(...n: any[]): any;
    mode(...n: any[]): string;
    range(...n: any[]): string;
    greatestCommonDivisor(...n: any[]): any;
    GCD(...n: any[]): any;
    highestCommonFactor(...n: any[]): any;
    HCF(...n: any[]): any;
    leastCommonMultiple(...n: any[]): any;
    LCM(...n: any[]): any;
    isEven(n: any): boolean;
    isOdd(n: any): boolean;
    isPositive(n: any): boolean;
    isNegative(n: any): boolean;
    isInteger(n: any): any;
    isFloat(n: any): boolean;
    isPrime(n: any): boolean;
    isComposite(n: any): boolean;
    isDivisible(n: any, d: any): boolean;
    isPowerOf(n: any, e: any): boolean;
    isPerfectSquare(n: any): boolean;
    isPerfectCube(n: any): boolean;
    isPerfectPower(n: any, b: any): boolean;
    isMultiple(n: any, m: any): boolean;
    isFactor(n: any, f: any): boolean;
    isArmstrong(n: any): boolean;
    isPalindrome(n: any): boolean;
    isFinite(n: any): any;
    factorial(n: any): number;
    fibonacci(n: any): number;
    random(a: any, b: any): any;
    log(n: any, b: any): string;
    logBase2(n: any): any;
    logBase5(n: any): number;
    logBase10(n: any): any;
    sin(n: any): string;
    cos(n: any): string;
    tan(n: any): string;
    cot(n: any): string;
    sec(n: any): string;
    csc(n: any): string;
    evaluateExpression(e: any): any;
    default: {
        e: number;
        PI: number;
        LN2: number;
        LN10: number;
        TAU: number;
        LOG2E: number;
        LOG10E: number;
        EPSILON: any;
        PHI: number;
        add(...n: any[]): any;
        subtract(...n: any[]): any;
        multiply(...n: any[]): any;
        divide(...n: any[]): any;
        square(n: any): number;
        cube(n: any): number;
        power(n: any, e: any): number;
        root(n: any, e: any): number;
        round(n: any): number;
        roundUp(n: any): number;
        roundDown(n: any): number;
        absolute(n: any): number;
        remainder(n: any, d: any): number;
        max(...n: any[]): number;
        min(...n: any[]): number;
        sqrt(n: any): number;
        cbrt(n: any): any;
        hypotenuse(a: any, b: any): any;
        average(...n: any[]): number;
        mean(...n: any[]): number;
        median(...n: any[]): any;
        mode(...n: any[]): string;
        range(...n: any[]): string;
        greatestCommonDivisor(...n: any[]): any;
        GCD(...n: any[]): any;
        highestCommonFactor(...n: any[]): any;
        HCF(...n: any[]): any;
        leastCommonMultiple(...n: any[]): any;
        LCM(...n: any[]): any;
        isEven(n: any): boolean;
        isOdd(n: any): boolean;
        isPositive(n: any): boolean;
        isNegative(n: any): boolean;
        isInteger(n: any): any;
        isFloat(n: any): boolean;
        isPrime(n: any): boolean;
        isComposite(n: any): boolean;
        isDivisible(n: any, d: any): boolean;
        isPowerOf(n: any, e: any): boolean;
        isPerfectSquare(n: any): boolean;
        isPerfectCube(n: any): boolean;
        isPerfectPower(n: any, b: any): boolean;
        isMultiple(n: any, m: any): boolean;
        isFactor(n: any, f: any): boolean;
        isArmstrong(n: any): boolean;
        isPalindrome(n: any): boolean;
        isFinite(n: any): any;
        factorial(n: any): number;
        fibonacci(n: any): number;
        random(a: any, b: any): any;
        log(n: any, b: any): string;
        logBase2(n: any): any;
        logBase5(n: any): number;
        logBase10(n: any): any;
        sin(n: any): string;
        cos(n: any): string;
        tan(n: any): string;
        cot(n: any): string;
        sec(n: any): string;
        csc(n: any): string;
        evaluateExpression(e: any): any;
    };
} | {
    e: number;
    PI: number;
    LN2: number;
    LN10: number;
    TAU: number;
    LOG2E: number;
    LOG10E: number;
    EPSILON: any;
    PHI: number;
    add(...n: any[]): any;
    subtract(...n: any[]): any;
    multiply(...n: any[]): any;
    divide(...n: any[]): any;
    square(n: any): number;
    cube(n: any): number;
    power(n: any, e: any): number;
    root(n: any, e: any): number;
    round(n: any): number;
    roundUp(n: any): number;
    roundDown(n: any): number;
    absolute(n: any): number;
    remainder(n: any, d: any): number;
    max(...n: any[]): number;
    min(...n: any[]): number;
    sqrt(n: any): number;
    cbrt(n: any): any;
    hypotenuse(a: any, b: any): any;
    average(...n: any[]): number;
    mean(...n: any[]): number;
    median(...n: any[]): any;
    mode(...n: any[]): string;
    range(...n: any[]): string;
    greatestCommonDivisor(...n: any[]): any;
    GCD(...n: any[]): any;
    highestCommonFactor(...n: any[]): any;
    HCF(...n: any[]): any;
    leastCommonMultiple(...n: any[]): any;
    LCM(...n: any[]): any;
    isEven(n: any): boolean;
    isOdd(n: any): boolean;
    isPositive(n: any): boolean;
    isNegative(n: any): boolean;
    isInteger(n: any): any;
    isFloat(n: any): boolean;
    isPrime(n: any): boolean;
    isComposite(n: any): boolean;
    isDivisible(n: any, d: any): boolean;
    isPowerOf(n: any, e: any): boolean;
    isPerfectSquare(n: any): boolean;
    isPerfectCube(n: any): boolean;
    isPerfectPower(n: any, b: any): boolean;
    isMultiple(n: any, m: any): boolean;
    isFactor(n: any, f: any): boolean;
    isArmstrong(n: any): boolean;
    isPalindrome(n: any): boolean;
    isFinite(n: any): any;
    factorial(n: any): number;
    fibonacci(n: any): number;
    random(a: any, b: any): any;
    log(n: any, b: any): string;
    logBase2(n: any): any;
    logBase5(n: any): number;
    logBase10(n: any): any;
    sin(n: any): string;
    cos(n: any): string;
    tan(n: any): string;
    cot(n: any): string;
    sec(n: any): string;
    csc(n: any): string;
    evaluateExpression(e: any): any;
    default: {
        e: number;
        PI: number;
        LN2: number;
        LN10: number;
        TAU: number;
        LOG2E: number;
        LOG10E: number;
        EPSILON: any;
        PHI: number;
        add(...n: any[]): any;
        subtract(...n: any[]): any;
        multiply(...n: any[]): any;
        divide(...n: any[]): any;
        square(n: any): number;
        cube(n: any): number;
        power(n: any, e: any): number;
        root(n: any, e: any): number;
        round(n: any): number;
        roundUp(n: any): number;
        roundDown(n: any): number;
        absolute(n: any): number;
        remainder(n: any, d: any): number;
        max(...n: any[]): number;
        min(...n: any[]): number;
        sqrt(n: any): number;
        cbrt(n: any): any;
        hypotenuse(a: any, b: any): any;
        average(...n: any[]): number;
        mean(...n: any[]): number;
        median(...n: any[]): any;
        mode(...n: any[]): string;
        range(...n: any[]): string;
        greatestCommonDivisor(...n: any[]): any;
        GCD(...n: any[]): any;
        highestCommonFactor(...n: any[]): any;
        HCF(...n: any[]): any;
        leastCommonMultiple(...n: any[]): any;
        LCM(...n: any[]): any;
        isEven(n: any): boolean;
        isOdd(n: any): boolean;
        isPositive(n: any): boolean;
        isNegative(n: any): boolean;
        isInteger(n: any): any;
        isFloat(n: any): boolean;
        isPrime(n: any): boolean;
        isComposite(n: any): boolean;
        isDivisible(n: any, d: any): boolean;
        isPowerOf(n: any, e: any): boolean;
        isPerfectSquare(n: any): boolean;
        isPerfectCube(n: any): boolean;
        isPerfectPower(n: any, b: any): boolean;
        isMultiple(n: any, m: any): boolean;
        isFactor(n: any, f: any): boolean;
        isArmstrong(n: any): boolean;
        isPalindrome(n: any): boolean;
        isFinite(n: any): any;
        factorial(n: any): number;
        fibonacci(n: any): number;
        random(a: any, b: any): any;
        log(n: any, b: any): string;
        logBase2(n: any): any;
        logBase5(n: any): number;
        logBase10(n: any): any;
        sin(n: any): string;
        cos(n: any): string;
        tan(n: any): string;
        cot(n: any): string;
        sec(n: any): string;
        csc(n: any): string;
        evaluateExpression(e: any): any;
    };
};
export = _exports;
declare namespace _default {
    let e: number;
    let PI: number;
    let LN2: number;
    let LN10: number;
    let TAU: number;
    let LOG2E: number;
    let LOG10E: number;
    let EPSILON: any;
    let PHI: number;
    function add(...n: any[]): any;
    function subtract(...n: any[]): any;
    function multiply(...n: any[]): any;
    function divide(...n: any[]): any;
    function square(n: any): number;
    function cube(n: any): number;
    function power(n: any, e: any): number;
    function root(n: any, e: any): number;
    function round(n: any): number;
    function roundUp(n: any): number;
    function roundDown(n: any): number;
    function absolute(n: any): number;
    function remainder(n: any, d: any): number;
    function max(...n: any[]): number;
    function min(...n: any[]): number;
    function sqrt(n: any): number;
    function cbrt(n: any): any;
    function hypotenuse(a: any, b: any): any;
    function average(...n: any[]): number;
    function mean(...n: any[]): number;
    function median(...n: any[]): any;
    function mode(...n: any[]): string;
    function range(...n: any[]): string;
    function greatestCommonDivisor(...n: any[]): any;
    function GCD(...n: any[]): any;
    function highestCommonFactor(...n: any[]): any;
    function HCF(...n: any[]): any;
    function leastCommonMultiple(...n: any[]): any;
    function LCM(...n: any[]): any;
    function isEven(n: any): boolean;
    function isOdd(n: any): boolean;
    function isPositive(n: any): boolean;
    function isNegative(n: any): boolean;
    function isInteger(n: any): any;
    function isFloat(n: any): boolean;
    function isPrime(n: any): boolean;
    function isComposite(n: any): boolean;
    function isDivisible(n: any, d: any): boolean;
    function isPowerOf(n: any, e: any): boolean;
    function isPerfectSquare(n: any): boolean;
    function isPerfectCube(n: any): boolean;
    function isPerfectPower(n: any, b: any): boolean;
    function isMultiple(n: any, m: any): boolean;
    function isFactor(n: any, f: any): boolean;
    function isArmstrong(n: any): boolean;
    function isPalindrome(n: any): boolean;
    function isFinite(n: any): any;
    function factorial(n: any): number;
    function fibonacci(n: any): number;
    function random(a: any, b: any): any;
    function log(n: any, b: any): string;
    function logBase2(n: any): any;
    function logBase5(n: any): number;
    function logBase10(n: any): any;
    function sin(n: any): string;
    function cos(n: any): string;
    function tan(n: any): string;
    function cot(n: any): string;
    function sec(n: any): string;
    function csc(n: any): string;
    function evaluateExpression(e: any): any;
}
export default _default;
